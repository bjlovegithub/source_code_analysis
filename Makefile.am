## Process this file with automake to produce Makefile.in

AUTOMAKE_OPTIONS = 1.5 subdir-objects
ACLOCAL_AMFLAGS = -I m4

# `make QUIET=' overrides `./configure --enable-quiet'.
# `make QUIET=y' overrides `./configure' without `--enable-quiet'.
LIBTOOL = @LIBTOOL@ $(QUIET:y=--quiet)

if MAINTAINER_MODE
# Export these so that we run the locally installed autotools when building
# from a bootstrapped SVN tree.
export ACLOCAL AUTOCONF AUTOHEADER AUTOM4TE AUTOMAKE
endif

INCLUDES = -I$(top_srcdir)/common -I$(top_srcdir)/include
if VPATH_BUILD
# Needed for the generated files include/xapian/version.h
# include/xapian/error.h and include/xapian/errordispatch.h
INCLUDES += -I$(top_builddir)/include
endif

# Order is relevant: when building, tests must be after ".".
SUBDIRS = . docs tests

noinst_HEADERS =
BUILT_SOURCES =
noinst_LTLIBRARIES =
DISTCLEANFILES =
MAINTAINERCLEANFILES =
bin_PROGRAMS =
EXTRA_PROGRAMS =

.PHONY: check-none check-inmemory check-multi \
        check-remote check-remoteprog check-remotetcp \
        check-chert check-flint check-perftest \
	coverage-reconfigure coverage-check

check-none:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-none

check-inmemory:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-inmemory

check-multi:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-multi

if BUILD_BACKEND_REMOTE
check-remote:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-remote
check-remoteprog:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-remoteprog
check-remotetcp:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-remotetcp
if BUILD_BACKEND_CHERT
check-remoteprog-chert:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-remoteprog-chert
check-remotetcp-chert: apitest$(EXEEXT)
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-remotetcp-chert
endif
if BUILD_BACKEND_FLINT
check-remoteprog-flint:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-remoteprog-flint
check-remotetcp-flint: apitest$(EXEEXT)
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-remotetcp-flint
endif
endif

if BUILD_BACKEND_CHERT
check-multi-chert:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-multi-chert
check-chert:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-chert
endif

if BUILD_BACKEND_FLINT
check-multi-flint:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-multi-flint
check-flint:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-flint
endif

check-perf:
	cd tests && $(MAKE) $(AM_MAKEFLAGS) check-perf

coverage-reconfigure: distclean
	## --disable-shared as shared builds fail for me on x86-64 Debian etch.
	## CCACHE_DISABLE as ccache 2.4 doesn't handle the .gcno files.
	$(srcdir)/configure CXXFLAGS='-O0 --coverage' --enable-quiet --disable-shared CCACHE_DISABLE=1 VALGRIND=

coverage-check:
	## GNU find and xargs specific.
	find . -name '*.gcda' -print0|xargs -0 rm -f
	## Don't run under valgrind even if configure was run by hand.
	$(MAKE) $(AM_MAKEFLAGS) check VALGRIND=
	rm -f xapian-core.lcov
	for d in api backends bin common examples expand include languages \
	    matcher net queryparser tests unicode weight ; do \
	    rm -f tests/$$d ; \
	    ln -s ../$$d tests/$$d ; \
	done
	cd tests && lcov -c -b `pwd` -d `pwd` -o ../tmp.lcov
	sed '/^SF:\/usr/,/^end_of_record/{d};s,^\(SF:/.*/xapian-core/\)\([^t]\),\1tests/\2,' tmp.lcov > xapian-core.lcov
	genhtml -q -t "Test Coverage for xapian-core r`svn info|sed 's/^Revision: //p;d'`" -o lcov xapian-core.lcov

bin_SCRIPTS = xapian-config

CLEANFILES = xapian-config

EXTRA_DIST = ChangeLog ChangeLog.examples HACKING PLATFORMS xapian-core.spec \
 include/xapian/error.h include/xapian/errordispatch.h generate-exceptions \
 exception_data.pm preautoreconf dir_contents

# docsource.mk is generated by preautoreconf, run by bootstrap prior to
# it running autoreconf.
include docsource.mk

# Install the m4 file containing the XO_LIB_XAPIAN autoconf macro.
m4datadir = $(datadir)/aclocal
dist_m4data_DATA = m4-macros/xapian-1.1.m4

libxapian_la = libxapian-1.1.la
lib_LTLIBRARIES = libxapian-1.1.la
libxapian_1_1_la_SOURCES = $(lib_src)
libxapian_1_1_la_LDFLAGS = \
    $(XAPIAN_LDFLAGS) -no-undefined -version-info $(LIBRARY_VERSION_INFO)

lib_src =

if !MAINTAINER_NO_DOCS
dist_man_MANS = xapian-config.1
endif

include api/Makefile.mk
include bin/Makefile.mk
include backends/Makefile.mk
include common/Makefile.mk
include examples/Makefile.mk
include expand/Makefile.mk
include include/Makefile.mk
include languages/Makefile.mk
include matcher/Makefile.mk
include net/Makefile.mk
include queryparser/Makefile.mk
include unicode/Makefile.mk
include weight/Makefile.mk

xapianinclude_HEADERS += include/xapian/error.h

if MAINTAINER_MODE
BUILT_SOURCES += include/xapian/error.h include/xapian/errordispatch.h

include/xapian/error.h include/xapian/errordispatch.h: generate-exceptions exception_data.pm
	$(PERL) -w -I"$(srcdir)" "$(srcdir)/generate-exceptions"
endif

if !MAINTAINER_NO_DOCS
MAINTAINERCLEANFILES += $(dist_man_MANS)
endif

if DOCUMENTATION_RULES
CLEANFILES += $(dist_man_MANS)

xapian-config.1: xapian-config makemanpage
	./makemanpage ./xapian-config xapian-config xapian-config.1
endif

MAINTAINERCLEANFILES += $(BUILT_SOURCES)
